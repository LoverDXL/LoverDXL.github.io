[{"title":"Hello World","url":"/post/16107.html","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"},{"title":"1.双指针","url":"/post/33019.html","content":"<h4 id=\"167-两数之和-II-输入有序数组\"><a href=\"#167-两数之和-II-输入有序数组\" class=\"headerlink\" title=\"167. 两数之和 II - 输入有序数组\"></a><a href=\"https://leetcode-cn.com/problems/two-sum-ii-input-array-is-sorted/\">167. 两数之和 II - 输入有序数组</a></h4><p>难度:简单</p>\n<p>给定一个已按照 <strong>升序排列</strong> 的整数数组 <code>numbers</code> ，请你从数组中找出两个数满足相加之和等于目标数 <code>target</code> 。</p>\n<p>函数应该以长度为 <code>2</code> 的整数数组的形式返回这两个数的下标值<em>。</em><code>numbers</code> 的下标 <strong>从 1 开始计数</strong> ，所以答案数组应当满足 <code>1 &lt;= answer[0] &lt; answer[1] &lt;= numbers.length</code> 。</p>\n<p>你可以假设每个输入只对应唯一的答案，而且你不可以重复使用相同的元素。</p>\n<p><strong>示例 1：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入：numbers = [2,7,11,15], target = 9</span><br><span class=\"line\">输出：[1,2]</span><br><span class=\"line\">解释：2 与 7 之和等于目标数 9 。因此 index1 = 1, index2 = 2 。</span><br></pre></td></tr></table></figure>\n\n<p><strong>示例 2：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入：numbers = [2,3,4], target = 6</span><br><span class=\"line\">输出：[1,3]</span><br></pre></td></tr></table></figure>\n\n<p><strong>示例 3：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入：numbers = [-1,0], target = -1</span><br><span class=\"line\">输出：[1,2]</span><br></pre></td></tr></table></figure>\n\n<p><strong>提示：</strong></p>\n<ul>\n<li><code>2 &lt;= numbers.length &lt;= 3 * 104</code></li>\n<li><code>-1000 &lt;= numbers[i] &lt;= 1000</code></li>\n<li><code>numbers</code> 按 <strong>递增顺序</strong> 排列</li>\n<li><code>-1000 &lt;= target &lt;= 1000</code></li>\n<li>仅存在一个有效答案</li>\n</ul>\n<p><strong>解析：</strong></p>\n<p>来源链接：<a href=\"https://leetcode-cn.com/problems/two-sum-ii-input-array-is-sorted/solution/liang-shu-zhi-he-ii-shu-ru-you-xu-shu-zu-by-leet-2/\">两数之和 II - 输入有序数组 - 两数之和 II - 输入有序数组 - 力扣（LeetCode） (leetcode-cn.com)</a></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span>[] twoSum(<span class=\"keyword\">int</span>[] numbers, <span class=\"keyword\">int</span> target) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(numbers == <span class=\"keyword\">null</span>) <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> i  = <span class=\"number\">0</span>, j = numbers.length-<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(i&lt;j)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> sum = numbers[i] + numbers[j];</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(sum == target)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[]&#123;i+<span class=\"number\">1</span>,j+<span class=\"number\">1</span>&#125;;</span><br><span class=\"line\">            &#125; </span><br><span class=\"line\">              </span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(sum &gt; target)&#123;</span><br><span class=\"line\">                j--;</span><br><span class=\"line\">            &#125; </span><br><span class=\"line\">            <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                i++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"633-平方数之和\"><a href=\"#633-平方数之和\" class=\"headerlink\" title=\"633. 平方数之和\"></a><a href=\"https://leetcode-cn.com/problems/sum-of-square-numbers/\">633. 平方数之和</a></h4><p>难度:中等</p>\n<p>给定一个非负整数 <code>c</code> ，你要判断是否存在两个整数 <code>a</code> 和 <code>b</code>，使得 <code>a2 + b2 = c</code> 。</p>\n<p><strong>示例 1：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入：c = 5</span><br><span class=\"line\">输出：true</span><br><span class=\"line\">解释：1 * 1 + 2 * 2 = 5</span><br></pre></td></tr></table></figure>\n\n<p><strong>示例 2：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入：c = 3</span><br><span class=\"line\">输出：false</span><br></pre></td></tr></table></figure>\n\n<p><strong>示例 3：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入：c = 4</span><br><span class=\"line\">输出：true</span><br></pre></td></tr></table></figure>\n\n<p><strong>示例 4：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入：c = 2</span><br><span class=\"line\">输出：true</span><br></pre></td></tr></table></figure>\n\n<p><strong>示例 5：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入：c = 1</span><br><span class=\"line\">输出：true</span><br></pre></td></tr></table></figure>\n\n<p><strong>提示：</strong></p>\n<ul>\n<li><code>0 &lt;= c &lt;= 231 - 1</code></li>\n</ul>\n<p><strong>解析：</strong></p>\n<p>来源链接：<a href=\"https://leetcode-cn.com/problems/sum-of-square-numbers/solution/shuang-zhi-zhen-de-ben-zhi-er-wei-ju-zhe-ebn3/\">为什么双指针不会错过正确答案？双指针的本质。 - 平方数之和 - 力扣（LeetCode） (leetcode-cn.com)</a></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">judgeSquareSum</span><span class=\"params\">(<span class=\"keyword\">int</span> c)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> i  = <span class=\"number\">0</span>, j = (<span class=\"keyword\">int</span>)Math.sqrt(c);<span class=\"comment\">//从double转为int 需要强转</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(i &lt;= j)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> sum  = i * i + j * j;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(sum == c)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(sum &gt; c)&#123;</span><br><span class=\"line\">                j--;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                i++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">             </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"345-反转字符串中的元音字母\"><a href=\"#345-反转字符串中的元音字母\" class=\"headerlink\" title=\"345. 反转字符串中的元音字母\"></a><a href=\"https://leetcode-cn.com/problems/reverse-vowels-of-a-string/\">345. 反转字符串中的元音字母</a></h4><p>难度:简单</p>\n<p>编写一个函数，以字符串作为输入，反转该字符串中的元音字母。</p>\n<p><strong>示例 1：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入：&quot;hello&quot;</span><br><span class=\"line\">输出：&quot;holle&quot;</span><br></pre></td></tr></table></figure>\n\n<p><strong>示例 2：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入：&quot;leetcode&quot;</span><br><span class=\"line\">输出：&quot;leotcede&quot;</span><br></pre></td></tr></table></figure>\n\n<p><strong>提示：</strong></p>\n<ul>\n<li>元音字母不包含字母 “y” 。</li>\n</ul>\n<p><strong>解析;</strong></p>\n<p><a href=\"https://camo.githubusercontent.com/17ebd4ccaad189dd486211b3e18e20287541acf35cb203dd510aef61bfcdc301/68747470733a2f2f63732d6e6f7465732d313235363130393739362e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f61376362383432332d383935642d343937352d386566382d3636326130303239633737322e706e67\"><img src=\"https://camo.githubusercontent.com/17ebd4ccaad189dd486211b3e18e20287541acf35cb203dd510aef61bfcdc301/68747470733a2f2f63732d6e6f7465732d313235363130393739362e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f61376362383432332d383935642d343937352d386566382d3636326130303239633737322e706e67\" alt=\"img\"></a></p>\n<p>使用双指针，一个指针从头向尾遍历，一个指针从尾到头遍历，当两个指针都遍历到元音字符时，交换这两个元音字符。</p>\n<p>为了快速判断一个字符是不是元音字符，我们将全部元音字符添加到集合 HashSet 中，从而以 O(1) 的时间复杂度进行该操作。</p>\n<ul>\n<li>时间复杂度为 O(N)：只需要遍历所有元素一次</li>\n<li>空间复杂度 O(1)：只需要使用两个额外变量</li>\n</ul>\n<p><a href=\"https://camo.githubusercontent.com/8bed07b0617ab2350feddf81b28b3a3c3e6a6d69adcbbde555576514a3ac50c6/68747470733a2f2f63732d6e6f7465732d313235363130393739362e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f65663235666637632d306636332d343230642d386233302d6561666265656133356431312e676966\"><img src=\"https://camo.githubusercontent.com/8bed07b0617ab2350feddf81b28b3a3c3e6a6d69adcbbde555576514a3ac50c6/68747470733a2f2f63732d6e6f7465732d313235363130393739362e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f65663235666637632d306636332d343230642d386233302d6561666265656133356431312e676966\" alt=\"img\"></a></p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\"> Arrays.asList()该方法是将数组转化成List集合的方法。</span><br><span class=\"line\"></span><br><span class=\"line\"> List<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">String</span>&gt;</span></span> list = Arrays.asList(&quot;a&quot;,&quot;b&quot;,&quot;c&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">注意：</span><br><span class=\"line\"></span><br><span class=\"line\">（1）该方法适用于对象型数据的数组（String、Integer...）</span><br><span class=\"line\"></span><br><span class=\"line\">（2）该方法不建议使用于基本数据类型的数组（byte,short,int,long,float,double,boolean）</span><br><span class=\"line\"></span><br><span class=\"line\">（3）该方法将数组与List列表链接起来：当更新其一个时，另一个自动更新</span><br><span class=\"line\"></span><br><span class=\"line\">（4）不支持add()、remove()、clear()等方法</span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> HashSet&lt;Character&gt; vowels = <span class=\"keyword\">new</span> HashSet&lt;&gt;( <span class=\"comment\">//这里HashSet也可以换成List</span></span><br><span class=\"line\">        Arrays.asList(<span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;e&#x27;</span>, <span class=\"string\">&#x27;i&#x27;</span>, <span class=\"string\">&#x27;o&#x27;</span>, <span class=\"string\">&#x27;u&#x27;</span>, <span class=\"string\">&#x27;A&#x27;</span>, <span class=\"string\">&#x27;E&#x27;</span>, <span class=\"string\">&#x27;I&#x27;</span>, <span class=\"string\">&#x27;O&#x27;</span>, <span class=\"string\">&#x27;U&#x27;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">reverseVowels</span><span class=\"params\">(String s)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (s == <span class=\"keyword\">null</span>) <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>, j = s.length() - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">char</span>[] result = <span class=\"keyword\">new</span> <span class=\"keyword\">char</span>[s.length()];</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (i &lt;= j) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">char</span> ci = s.charAt(i);</span><br><span class=\"line\">        <span class=\"keyword\">char</span> cj = s.charAt(j);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!vowels.contains(ci)) &#123;</span><br><span class=\"line\">            result[i++] = ci;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!vowels.contains(cj)) &#123;</span><br><span class=\"line\">            result[j--] = cj;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            result[i++] = cj;</span><br><span class=\"line\">            result[j--] = ci;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> String(result);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"680-验证回文字符串-Ⅱ\"><a href=\"#680-验证回文字符串-Ⅱ\" class=\"headerlink\" title=\"680. 验证回文字符串 Ⅱ\"></a><a href=\"https://leetcode-cn.com/problems/valid-palindrome-ii/\">680. 验证回文字符串 Ⅱ</a></h4><p>难度:简单</p>\n<p>给定一个非空字符串 <code>s</code>，<strong>最多</strong>删除一个字符。判断是否能成为回文字符串。</p>\n<p><strong>示例 1:</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入: s = &quot;aba&quot;</span><br><span class=\"line\">输出: true</span><br></pre></td></tr></table></figure>\n\n<p><strong>示例 2:</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入: s = &quot;abca&quot;</span><br><span class=\"line\">输出: true</span><br><span class=\"line\">解释: 你可以删除c字符。</span><br></pre></td></tr></table></figure>\n\n<p><strong>示例 3:</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入: s = &quot;abc&quot;</span><br><span class=\"line\">输出: false</span><br></pre></td></tr></table></figure>\n\n<p><strong>提示:</strong></p>\n<ul>\n<li><code>1 &lt;= s.length &lt;= 105</code></li>\n<li><code>s</code> 由小写英文字母组成</li>\n</ul>\n<p><strong>解析</strong>：</p>\n<p>来源链接：<a href=\"https://leetcode-cn.com/problems/valid-palindrome-ii/solution/yan-zheng-hui-wen-zi-fu-chuan-ii-by-leetcode-solut/\">验证回文字符串 Ⅱ - 验证回文字符串 Ⅱ - 力扣（LeetCode） (leetcode-cn.com)</a></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">validPalindrome</span><span class=\"params\">(String s)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i =<span class=\"number\">0</span> ,j = s.length()-<span class=\"number\">1</span>;i&lt;j;i++,j--)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(s.charAt(i) != s.charAt(j))&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> isPalindrome(s,i+<span class=\"number\">1</span>,j) || isPalindrome(s,i,j-<span class=\"number\">1</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isPalindrome</span><span class=\"params\">(String s , <span class=\"keyword\">int</span> i ,<span class=\"keyword\">int</span> j)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(i&lt;j)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(s.charAt(i++) != s.charAt(j--))&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            &#125; </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"88-合并两个有序数组\"><a href=\"#88-合并两个有序数组\" class=\"headerlink\" title=\"88. 合并两个有序数组\"></a><a href=\"https://leetcode-cn.com/problems/merge-sorted-array/\">88. 合并两个有序数组</a></h4><p>难度:简单</p>\n<p>给你两个有序整数数组 <code>nums1</code> 和 <code>nums2</code>，请你将 <code>nums2</code> 合并到 <code>nums1</code> 中<em>，</em>使 <code>nums1</code> 成为一个有序数组。</p>\n<p>初始化 <code>nums1</code> 和 <code>nums2</code> 的元素数量分别为 <code>m</code> 和 <code>n</code> 。你可以假设 <code>nums1</code> 的空间大小等于 <code>m + n</code>，这样它就有足够的空间保存来自 <code>nums2</code> 的元素。</p>\n<p><strong>示例 1：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入：nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3</span><br><span class=\"line\">输出：[1,2,2,3,5,6]</span><br></pre></td></tr></table></figure>\n\n<p><strong>示例 2：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入：nums1 = [1], m = 1, nums2 = [], n = 0</span><br><span class=\"line\">输出：[1]</span><br></pre></td></tr></table></figure>\n\n<p><strong>提示：</strong></p>\n<ul>\n<li><code>nums1.length == m + n</code></li>\n<li><code>nums2.length == n</code></li>\n<li><code>0 &lt;= m, n &lt;= 200</code></li>\n<li><code>1 &lt;= m + n &lt;= 200</code></li>\n<li><code>-109 &lt;= nums1[i], nums2[i] &lt;= 109</code></li>\n</ul>\n<p><strong>解析：</strong></p>\n<p>来源链接：<a href=\"https://leetcode-cn.com/problems/merge-sorted-array/solution/hua-jie-suan-fa-88-he-bing-liang-ge-you-xu-shu-zu-/\">画解算法：88. 合并两个有序数组 - 合并两个有序数组 - 力扣（LeetCode） (leetcode-cn.com)</a></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">merge</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums1, <span class=\"keyword\">int</span> m, <span class=\"keyword\">int</span>[] nums2, <span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> index1 = m-<span class=\"number\">1</span>,index2 = n -<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> mergeIndex = m+n-<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(index2 &gt;= <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(index1 &lt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                nums1[mergeIndex--] = nums2[index2--];</span><br><span class=\"line\">            <span class=\"comment\">//以下index2&lt;0 这个判断可写可不写    </span></span><br><span class=\"line\">            <span class=\"comment\">//&#125;else if(index2 &lt; 0)&#123;</span></span><br><span class=\"line\">                <span class=\"comment\">// nums1[mergeIndex--] = nums1[index1--];    </span></span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(nums1[index1] &gt; nums2[index2])&#123;</span><br><span class=\"line\">                nums1[mergeIndex--] = nums1[index1--];</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                nums1[mergeIndex--] = nums2[index2--];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"141-环形链表\"><a href=\"#141-环形链表\" class=\"headerlink\" title=\"141. 环形链表\"></a><a href=\"https://leetcode-cn.com/problems/linked-list-cycle/\">141. 环形链表</a></h4><p>难度:简单</p>\n<p>给定一个链表，判断链表中是否有环。</p>\n<p>如果链表中有某个节点，可以通过连续跟踪 <code>next</code> 指针再次到达，则链表中存在环。 为了表示给定链表中的环，我们使用整数 <code>pos</code> 来表示链表尾连接到链表中的位置（索引从 0 开始）。 如果 <code>pos</code> 是 <code>-1</code>，则在该链表中没有环。<strong>注意：<code>pos</code> 不作为参数进行传递</strong>，仅仅是为了标识链表的实际情况。</p>\n<p>如果链表中存在环，则返回 <code>true</code> 。 否则，返回 <code>false</code> 。</p>\n<p><strong>进阶：</strong></p>\n<p>你能用 *O(1)*（即，常量）内存解决此问题吗？</p>\n<p><strong>示例 1：</strong></p>\n<p><img src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/07/circularlinkedlist.png\" alt=\"img\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入：head = [3,2,0,-4], pos = 1</span><br><span class=\"line\">输出：true</span><br><span class=\"line\">解释：链表中有一个环，其尾部连接到第二个节点。</span><br></pre></td></tr></table></figure>\n\n<p><strong>示例 2：</strong></p>\n<p><img src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/07/circularlinkedlist_test2.png\" alt=\"img\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入：head = [1,2], pos = 0</span><br><span class=\"line\">输出：true</span><br><span class=\"line\">解释：链表中有一个环，其尾部连接到第一个节点。</span><br></pre></td></tr></table></figure>\n\n<p><strong>示例 3：</strong></p>\n<p><img src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/07/circularlinkedlist_test3.png\" alt=\"img\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入：head = [1], pos = -1</span><br><span class=\"line\">输出：false</span><br><span class=\"line\">解释：链表中没有环。</span><br></pre></td></tr></table></figure>\n\n<p><strong>提示：</strong></p>\n<ul>\n<li>链表中节点的数目范围是 <code>[0, 104]</code></li>\n<li><code>-105 &lt;= Node.val &lt;= 105</code></li>\n<li><code>pos</code> 为 <code>-1</code> 或者链表中的一个 <strong>有效索引</strong> 。</li>\n</ul>\n<p><strong>解析：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for singly-linked list.</span></span><br><span class=\"line\"><span class=\"comment\"> * class ListNode &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     int val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     ListNode next;</span></span><br><span class=\"line\"><span class=\"comment\"> *     ListNode(int x) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *         val = x;</span></span><br><span class=\"line\"><span class=\"comment\"> *         next = null;</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">hasCycle</span><span class=\"params\">(ListNode head)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(head == <span class=\"keyword\">null</span>) <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        ListNode slow = head,fast = head;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>( fast != <span class=\"keyword\">null</span> &amp;&amp; fast.next!= <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            </span><br><span class=\"line\">            fast = fast.next.next;</span><br><span class=\"line\">            slow = slow.next;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(slow == fast) <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>; <span class=\"comment\">// 先移动再判断，避免两个都在head还没移动的情况</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>解题思路</strong></p>\n<p>此题可以定义一个fast和slow两个引用，先开始让他们都指向头节点。然后让fast一次性走2步，slow一次性走一步，如果他们可以相遇，则证明链表有环。不让fast一次性走更多步的原因是，虽然可能相遇更快点，但也有可能相遇更慢，或者永远也相遇不了，这样的话不太稳定。因此我们选择让fast这个快引用一次走2步！</p>\n<p><strong>代码</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * Definition for singly-linked list.</span><br><span class=\"line\"> * class ListNode &#123;</span><br><span class=\"line\"> *     int val;</span><br><span class=\"line\"> *     ListNode next;</span><br><span class=\"line\"> *     ListNode(int x) &#123;</span><br><span class=\"line\"> *         val = x;</span><br><span class=\"line\"> *         next = null;</span><br><span class=\"line\"> *     &#125;</span><br><span class=\"line\"> * &#125;</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class Solution &#123;</span><br><span class=\"line\">    public boolean hasCycle(ListNode head) &#123;</span><br><span class=\"line\">        ListNode fast=head;</span><br><span class=\"line\">        ListNode slow=head;//定义快慢引用</span><br><span class=\"line\">        while(fast!=null&amp;&amp;fast.next!=null)&#123;</span><br><span class=\"line\">            //fast!=null要写在前面，这样由于短路与的特性，当前面为真时后面的条件就不执行了，就不会空指针异常了</span><br><span class=\"line\">            fast=fast.next.next;</span><br><span class=\"line\">            slow=slow.next;</span><br><span class=\"line\">            if(fast==slow)&#123;</span><br><span class=\"line\">                return true;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return false;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"524-通过删除字母匹配到字典里最长单词\"><a href=\"#524-通过删除字母匹配到字典里最长单词\" class=\"headerlink\" title=\"524. 通过删除字母匹配到字典里最长单词\"></a><a href=\"https://leetcode-cn.com/problems/longest-word-in-dictionary-through-deleting/\">524. 通过删除字母匹配到字典里最长单词</a></h4><p>难度：中等</p>\n<p>给你一个字符串 <code>s</code> 和一个字符串数组 <code>dictionary</code> 作为字典，找出并返回字典中最长的字符串，该字符串可以通过删除 <code>s</code> 中的某些字符得到。</p>\n<p>如果答案不止一个，返回长度最长且字典序最小的字符串。如果答案不存在，则返回空字符串。</p>\n<p><strong>示例 1：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入：s = &quot;abpcplea&quot;, dictionary = [&quot;ale&quot;,&quot;apple&quot;,&quot;monkey&quot;,&quot;plea&quot;]</span><br><span class=\"line\">输出：&quot;apple&quot;</span><br></pre></td></tr></table></figure>\n\n<p><strong>示例 2：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入：s = &quot;abpcplea&quot;, dictionary = [&quot;a&quot;,&quot;b&quot;,&quot;c&quot;]</span><br><span class=\"line\">输出：&quot;a&quot;</span><br></pre></td></tr></table></figure>\n\n<p><strong>提示：</strong></p>\n<ul>\n<li><code>1 &lt;= s.length &lt;= 1000</code></li>\n<li><code>1 &lt;= dictionary.length &lt;= 1000</code></li>\n<li><code>1 &lt;= dictionary[i].length &lt;= 1000</code></li>\n<li><code>s</code> 和 <code>dictionary[i]</code> 仅由小写英文字母组成</li>\n</ul>\n<p><strong>解析：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">findLongestWord</span><span class=\"params\">(String s, List&lt;String&gt; dictionary)</span> </span>&#123;</span><br><span class=\"line\">        String longestWord = <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(String target : dictionary)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> l1 = longestWord.length(),l2 = target.length();</span><br><span class=\"line\">            <span class=\"comment\">//   java中的compareto方法，返回参与比较的前后两个字符串的asc码的差值</span></span><br><span class=\"line\">            <span class=\"comment\">/// 获取长度最长且字典顺序最小的字符串</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(l1 &gt; l2 || (l1==l2) &amp;&amp; longestWord.compareTo(target) &lt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(isSubstr(s,target))&#123;</span><br><span class=\"line\">                longestWord = target;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> longestWord;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"comment\">// 判断 target 是否为 s 的子序列</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isSubstr</span><span class=\"params\">(String s,String target)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>, j = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(i&lt;s.length() &amp;&amp; j &lt; target.length())&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(s.charAt(i) == target.charAt(j))&#123;</span><br><span class=\"line\">                j++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            i++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> j == target.length();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n","categories":["leetcode","算法"],"tags":["算法"]},{"title":"2.排序","url":"/post/23869.html","content":"<h4 id=\"215-数组中的第K个最大元素\"><a href=\"#215-数组中的第K个最大元素\" class=\"headerlink\" title=\"215. 数组中的第K个最大元素\"></a><a href=\"https://leetcode-cn.com/problems/kth-largest-element-in-an-array/\">215. 数组中的第K个最大元素</a></h4><p>难度：中等</p>\n<p>给定整数数组 <code>nums</code> 和整数 <code>k</code>，请返回数组中第 <code>**k**</code> 个最大的元素。</p>\n<p>请注意，你需要找的是数组排序后的第 <code>k</code> 个最大的元素，而不是第 <code>k</code> 个不同的元素。</p>\n<p><strong>示例 1:</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入: [3,2,1,5,6,4] 和 k = 2</span><br><span class=\"line\">输出: 5</span><br></pre></td></tr></table></figure>\n\n<p><strong>示例 2:</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入: [3,2,3,1,2,4,5,5,6] 和 k = 4</span><br><span class=\"line\">输出: 4</span><br></pre></td></tr></table></figure>\n\n<p><strong>提示：</strong></p>\n<ul>\n<li><code>1 &lt;= k &lt;= nums.length &lt;= 104</code></li>\n<li><code>-104 &lt;= nums[i] &lt;= 104</code></li>\n</ul>\n<p><strong>解析</strong>：</p>\n<p><strong>排序</strong> ：时间复杂度 O(NlogN)，空间复杂度 O(1)</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">public int findKthLargest(int[] nums, int k) &#123;</span><br><span class=\"line\">    Arrays.sort(nums);</span><br><span class=\"line\">    return nums[nums.length - k];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>快速排序</strong>：时间复杂度 O(N)，空间复杂度 O(1)</p>\n<p>来源链接：<a href=\"https://leetcode-cn.com/problems/kth-largest-element-in-an-array/solution/shu-zu-zhong-de-di-kge-zui-da-yuan-su-by-leetcode-/\">数组中的第K个最大元素 - 数组中的第K个最大元素 - 力扣（LeetCode） (leetcode-cn.com)</a></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">findKthLargest</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> k)</span> </span>&#123;</span><br><span class=\"line\">        k = nums.length -k;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> l = <span class=\"number\">0</span> ,h = nums.length-<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(l&lt;h)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> j = partition(nums,l,h);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(j == k)&#123; <span class=\"comment\">//如果返回的基准恰好等于k 则直接终止循环，返回数组</span></span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(j&lt;k)&#123;</span><br><span class=\"line\">                l = j + <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                h = j-<span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> nums[k];        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">partition</span><span class=\"params\">(<span class=\"keyword\">int</span>[] a ,<span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> h)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>  i = l ,j =h; </span><br><span class=\"line\">        <span class=\"keyword\">while</span>(i&lt;j)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//注意这里一定要让j-- 在 i++前面</span></span><br><span class=\"line\">            <span class=\"comment\">////即注意：此时一定时要先往左移动右边的指针，不然会出现错误。因为我们基准数选取的</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">//左边的位置，以为左边的数都比基准数小，为了确保最后i=j的时候的数也比基准数小</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">//就只不能先把大于基准的数排完留下的才一定是满足与基准数交换的比他小的数。</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span>(a[j] &gt;= a[l] &amp;&amp; j&gt;l)&#123; </span><br><span class=\"line\">                j--;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(a[i] &lt;= a[l] &amp;&amp; i&lt;h)&#123;<span class=\"comment\">//a[l]为基准，通常快排都是让第一个数为基准</span></span><br><span class=\"line\">                i++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">if</span>(i&gt;=j)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            swap(a,i,j);<span class=\"comment\">//如果遇到大于或小于基准的数，则交换</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        swap(a,l,j);<span class=\"comment\">//让基准位置(l)的数和j位置对换 </span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> j;       </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">swap</span><span class=\"params\">(<span class=\"keyword\">int</span>[] a , <span class=\"keyword\">int</span> i , <span class=\"keyword\">int</span> j)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> tem = a[i];</span><br><span class=\"line\">        a[i] = a[j];</span><br><span class=\"line\">        a[j] = tem;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>堆排序：</strong>时间复杂度 O(NlogK)，空间复杂度 O(K)。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">findKthLargest</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> k)</span> </span>&#123;</span><br><span class=\"line\">    PriorityQueue&lt;Integer&gt; pq = <span class=\"keyword\">new</span> PriorityQueue&lt;&gt;(); <span class=\"comment\">// 小顶堆</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> val : nums) &#123;</span><br><span class=\"line\">        pq.add(val);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (pq.size() &gt; k)  <span class=\"comment\">// 维护堆的大小为 K</span></span><br><span class=\"line\">            pq.poll();<span class=\"comment\">//获取并移除此队列的头，如果此队列为空，则返回null</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> pq.peek();<span class=\"comment\">//获取但不移除此队列的头，如果此队列为空，则返回null </span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>手写堆排序：大根堆</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HeapSort</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String []args)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> []arr = &#123;<span class=\"number\">9</span>,<span class=\"number\">8</span>,<span class=\"number\">7</span>,<span class=\"number\">6</span>,<span class=\"number\">5</span>,<span class=\"number\">4</span>,<span class=\"number\">3</span>,<span class=\"number\">2</span>,<span class=\"number\">1</span>&#125;;</span><br><span class=\"line\">        sort(arr);</span><br><span class=\"line\">        System.out.println(Arrays.toString(arr));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">sort</span><span class=\"params\">(<span class=\"keyword\">int</span> []arr)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//1.构建大顶堆</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=arr.length/<span class=\"number\">2</span>-<span class=\"number\">1</span>;i&gt;=<span class=\"number\">0</span>;i--)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//从第一个非叶子结点从下至上，从右至左调整结构</span></span><br><span class=\"line\">            adjustHeap(arr,i,arr.length);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//2.调整堆结构+交换堆顶元素与末尾元素</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=arr.length-<span class=\"number\">1</span>;j&gt;<span class=\"number\">0</span>;j--)&#123;<span class=\"comment\">//假如是5个数 只需交换四次</span></span><br><span class=\"line\">            swap(arr,<span class=\"number\">0</span>,j);<span class=\"comment\">//将堆顶元素与末尾元素进行交换</span></span><br><span class=\"line\">            adjustHeap(arr,<span class=\"number\">0</span>,j);<span class=\"comment\">//重新对堆进行调整</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 调整大顶堆（仅是调整过程，建立在大顶堆已构建的基础上）</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> arr</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> i</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> length</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">adjustHeap</span><span class=\"params\">(<span class=\"keyword\">int</span> []arr,<span class=\"keyword\">int</span> i,<span class=\"keyword\">int</span> length)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> temp = arr[i];<span class=\"comment\">//先取出当前元素i</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> k=i*<span class=\"number\">2</span>+<span class=\"number\">1</span>;k&lt;length;k=k*<span class=\"number\">2</span>+<span class=\"number\">1</span>)&#123;<span class=\"comment\">//从i结点的左子结点开始，也就是2i+1处开始</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(k+<span class=\"number\">1</span>&lt;length &amp;&amp; arr[k]&lt;arr[k+<span class=\"number\">1</span>])&#123;<span class=\"comment\">//如果左子结点小于右子结点，k指向右子结点</span></span><br><span class=\"line\">                k++;<span class=\"comment\">//k指向右子节点</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(arr[k] &gt;temp)&#123;<span class=\"comment\">//如果子节点大于父节点，将子节点值赋给父节点（不用进行交换）</span></span><br><span class=\"line\">                arr[i] = arr[k];</span><br><span class=\"line\">                i = k;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        arr[i] = temp;<span class=\"comment\">//将temp值放到最终的位置</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 交换元素</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> arr</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> a</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> b</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">swap</span><span class=\"params\">(<span class=\"keyword\">int</span> []arr,<span class=\"keyword\">int</span> a ,<span class=\"keyword\">int</span> b)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> temp=arr[a];</span><br><span class=\"line\">        arr[a] = arr[b];</span><br><span class=\"line\">        arr[b] = temp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"347-前-K-个高频元素\"><a href=\"#347-前-K-个高频元素\" class=\"headerlink\" title=\"347. 前 K 个高频元素\"></a><a href=\"https://leetcode-cn.com/problems/top-k-frequent-elements/\">347. 前 K 个高频元素</a></h4><p>难度:中等</p>\n<p>给你一个整数数组 <code>nums</code> 和一个整数 <code>k</code> ，请你返回其中出现频率前 <code>k</code> 高的元素。你可以按 <strong>任意顺序</strong> 返回答案。</p>\n<p><strong>示例 1:</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入: nums = [1,1,1,2,2,3], k = 2</span><br><span class=\"line\">输出: [1,2]</span><br></pre></td></tr></table></figure>\n\n<p><strong>示例 2:</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入: nums = [1], k = 1</span><br><span class=\"line\">输出: [1]</span><br></pre></td></tr></table></figure>\n\n<p><strong>提示：</strong></p>\n<ul>\n<li><code>1 &lt;= nums.length &lt;= 105</code></li>\n<li><code>k</code> 的取值范围是 <code>[1, 数组中不相同的元素的个数]</code></li>\n<li>题目数据保证答案唯一，换句话说，数组中前 <code>k</code> 个高频元素的集合是唯一的</li>\n</ul>\n<p><strong>进阶：</strong>你所设计算法的时间复杂度 <strong>必须</strong> 优于 <code>O(n log n)</code> ，其中 <code>n</code> 是数组大小。</p>\n<p><strong>解析:</strong></p>\n<p>来源链接:<a href=\"https://leetcode-cn.com/problems/top-k-frequent-elements/solution/leetcode-di-347-hao-wen-ti-qian-k-ge-gao-pin-yuan-/\">347. 前 K 个高频元素 - 前 K 个高频元素 - 力扣（LeetCode） (leetcode-cn.com)</a></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span>[] topKFrequent(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> k) &#123;</span><br><span class=\"line\">        Map&lt;Integer,Integer&gt; frequencyForNum = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> num : nums)&#123;</span><br><span class=\"line\">            frequencyForNum.put(num,frequencyForNum.getOrDefault(num,<span class=\"number\">0</span>)+<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        List&lt;Integer&gt;[] buckets = <span class=\"keyword\">new</span> ArrayList[nums.length +<span class=\"number\">1</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> key : frequencyForNum.keySet())&#123;<span class=\"comment\">// Map.ketSet() 方法将获取 Map 集合的所有键名，并存放在一个 Set 集合对象中。</span></span><br><span class=\"line\">             <span class=\"keyword\">int</span> frequency  = frequencyForNum.get(key);</span><br><span class=\"line\">             <span class=\"keyword\">if</span>(buckets[frequency] == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">                buckets[frequency] = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();<span class=\"comment\">//因为可能有不同数是频率相同的</span></span><br><span class=\"line\"></span><br><span class=\"line\">            &#125; </span><br><span class=\"line\">            buckets[frequency].add(key);<span class=\"comment\">//这里的是频率当下标，值为哪个整数  </span></span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        List&lt;Integer&gt; topK = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = buckets.length-<span class=\"number\">1</span>;i&gt;=<span class=\"number\">0</span>&amp;&amp;topK.size() &lt; k ;i--)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(buckets[i] == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(buckets[i].size() &lt;= (k-topK.size()))&#123;<span class=\"comment\">//判断桶里面频率最高的元素个数是否超过k，如果没超过则全部添加进去</span></span><br><span class=\"line\">                topK.addAll(buckets[i]);</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;<span class=\"comment\">//如果桶里面元素个数超过了k，则取（0，k-topK.size()）个数</span></span><br><span class=\"line\">                topK.addAll(buckets[i].subList(<span class=\"number\">0</span>,k-topK.size()));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] res = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[k];</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i&lt;k;i++)&#123;</span><br><span class=\"line\">            res[i] = topK.get(i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;       </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"451-根据字符出现频率排序\"><a href=\"#451-根据字符出现频率排序\" class=\"headerlink\" title=\"451. 根据字符出现频率排序\"></a><a href=\"https://leetcode-cn.com/problems/sort-characters-by-frequency/\">451. 根据字符出现频率排序</a></h4><p>难度中等325</p>\n<p>给定一个字符串，请将字符串里的字符按照出现的频率降序排列。</p>\n<p><strong>示例 1:</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入:</span><br><span class=\"line\">&quot;tree&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">输出:</span><br><span class=\"line\">&quot;eert&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">解释:</span><br><span class=\"line\">&#x27;e&#x27;出现两次，&#x27;r&#x27;和&#x27;t&#x27;都只出现一次。</span><br><span class=\"line\">因此&#x27;e&#x27;必须出现在&#x27;r&#x27;和&#x27;t&#x27;之前。此外，&quot;eetr&quot;也是一个有效的答案。</span><br></pre></td></tr></table></figure>\n\n<p><strong>示例 2:</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入:</span><br><span class=\"line\">&quot;cccaaa&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">输出:</span><br><span class=\"line\">&quot;cccaaa&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">解释:</span><br><span class=\"line\">&#x27;c&#x27;和&#x27;a&#x27;都出现三次。此外，&quot;aaaccc&quot;也是有效的答案。</span><br><span class=\"line\">注意&quot;cacaca&quot;是不正确的，因为相同的字母必须放在一起。</span><br></pre></td></tr></table></figure>\n\n<p><strong>示例 3:</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入:</span><br><span class=\"line\">&quot;Aabb&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">输出:</span><br><span class=\"line\">&quot;bbAa&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">解释:</span><br><span class=\"line\">此外，&quot;bbaA&quot;也是一个有效的答案，但&quot;Aabb&quot;是不正确的。</span><br><span class=\"line\">注意&#x27;A&#x27;和&#x27;a&#x27;被认为是两种不同的字符。</span><br></pre></td></tr></table></figure>\n\n<p><strong>解析：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">frequencySort</span><span class=\"params\">(String s)</span> </span>&#123;</span><br><span class=\"line\">        HashMap&lt;Character,Integer&gt; frequencyForNum = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">char</span> c : s.toCharArray())&#123;</span><br><span class=\"line\">            frequencyForNum.put(c,frequencyForNum.getOrDefault(c,<span class=\"number\">0</span>)+<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        List&lt;Character&gt;[] frequencyBucket = <span class=\"keyword\">new</span> ArrayList[s.length()+<span class=\"number\">1</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">char</span> c : frequencyForNum.keySet())&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> f = frequencyForNum.get(c);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(frequencyBucket[f] == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">                frequencyBucket[f] = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            frequencyBucket[f].add(c);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        StringBuilder str = <span class=\"keyword\">new</span> StringBuilder();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = frequencyBucket.length-<span class=\"number\">1</span>;i &gt;= <span class=\"number\">0</span>;i--)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(frequencyBucket[i] == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">char</span> c : frequencyBucket[i])&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>;j &lt; i ; j++)&#123;</span><br><span class=\"line\">            str.append(c);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> str.toString();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"75-颜色分类\"><a href=\"#75-颜色分类\" class=\"headerlink\" title=\"75. 颜色分类\"></a><a href=\"https://leetcode-cn.com/problems/sort-colors/\">75. 颜色分类</a></h4><p>难度:中等</p>\n<p>给定一个包含红色、白色和蓝色，一共 <code>n</code> 个元素的数组，**<a href=\"https://baike.baidu.com/item/%E5%8E%9F%E5%9C%B0%E7%AE%97%E6%B3%95\">原地</a>**对它们进行排序，使得相同颜色的元素相邻，并按照红色、白色、蓝色顺序排列。</p>\n<p>此题中，我们使用整数 <code>0</code>、 <code>1</code> 和 <code>2</code> 分别表示红色、白色和蓝色。</p>\n<p><strong>示例 1：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入：nums = [2,0,2,1,1,0]</span><br><span class=\"line\">输出：[0,0,1,1,2,2]</span><br></pre></td></tr></table></figure>\n\n<p><strong>示例 2：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入：nums = [2,0,1]</span><br><span class=\"line\">输出：[0,1,2]</span><br></pre></td></tr></table></figure>\n\n<p><strong>示例 3：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入：nums = [0]</span><br><span class=\"line\">输出：[0]</span><br></pre></td></tr></table></figure>\n\n<p><strong>示例 4：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入：nums = [1]</span><br><span class=\"line\">输出：[1]</span><br></pre></td></tr></table></figure>\n\n<p><strong>提示：</strong></p>\n<ul>\n<li><code>n == nums.length</code></li>\n<li><code>1 &lt;= n &lt;= 300</code></li>\n<li><code>nums[i]</code> 为 <code>0</code>、<code>1</code> 或 <code>2</code></li>\n</ul>\n<p><strong>进阶：</strong></p>\n<ul>\n<li>你可以不使用代码库中的排序函数来解决这道题吗？</li>\n<li>你能想出一个仅使用常数空间的一趟扫描算法吗？</li>\n</ul>\n<p><strong>解析:</strong></p>\n<p>我们使用双指针left，right，指针left左侧都是0，指针right右侧都是2，初始化left，right在数组的两端。</p>\n<p>我们使用一个遍历变量i，遍历数组时nums[i]为0，则与左指针指向数字交换位置，然后左指针和i都向后移动，i左侧直到左指针都是1，当nums[i]为2时，则与右指针指向数字交换位置，然后右指针向左移动，i不变因为还要判断交换来的数字是什么，如果nums[i]为1，则不交换i向后移动，循环终止条件时i超过了右指针，此时后面已经是2，无需继续交换.</p>\n<p>来源链接：<a href=\"https://leetcode-cn.com/problems/sort-colors/solution/yan-se-fen-lei-shuang-zhi-zhen-jie-fa-by-43k7/\">颜色分类双指针解法 - 颜色分类 - 力扣（LeetCode） (leetcode-cn.com)</a></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sortColors</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> left = <span class=\"number\">0</span>, right = nums.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(i &lt;= right)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(nums[i] == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                swap(nums, left, i);</span><br><span class=\"line\">                left++;</span><br><span class=\"line\">                i++;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(nums[i] == <span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">                swap(nums, right, i);</span><br><span class=\"line\">                right--;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                i++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">swap</span><span class=\"params\">(<span class=\"keyword\">int</span> [] nums, <span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> j)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> temp = nums[i];</span><br><span class=\"line\">        nums[i] = nums[j];</span><br><span class=\"line\">        nums[j] = temp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","categories":["leetcode","算法"],"tags":["算法"]}]