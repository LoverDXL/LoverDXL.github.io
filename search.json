[{"title":"Hello World","url":"/2021/08/06/hello-world/","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"},{"title":"双指针","url":"/2021/08/06/%E7%AE%97%E6%B3%95/%E5%8F%8C%E6%8C%87%E9%92%88/","content":"<h4 id=\"167-两数之和-II-输入有序数组\"><a href=\"#167-两数之和-II-输入有序数组\" class=\"headerlink\" title=\"167. 两数之和 II - 输入有序数组\"></a><a href=\"https://leetcode-cn.com/problems/two-sum-ii-input-array-is-sorted/\">167. 两数之和 II - 输入有序数组</a></h4><p>难度:简单</p>\n<p>给定一个已按照 <strong>升序排列</strong> 的整数数组 <code>numbers</code> ，请你从数组中找出两个数满足相加之和等于目标数 <code>target</code> 。</p>\n<p>函数应该以长度为 <code>2</code> 的整数数组的形式返回这两个数的下标值<em>。</em><code>numbers</code> 的下标 <strong>从 1 开始计数</strong> ，所以答案数组应当满足 <code>1 &lt;= answer[0] &lt; answer[1] &lt;= numbers.length</code> 。</p>\n<p>你可以假设每个输入只对应唯一的答案，而且你不可以重复使用相同的元素。</p>\n<p><strong>示例 1：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入：numbers = [2,7,11,15], target = 9</span><br><span class=\"line\">输出：[1,2]</span><br><span class=\"line\">解释：2 与 7 之和等于目标数 9 。因此 index1 = 1, index2 = 2 。</span><br></pre></td></tr></table></figure>\n\n<p><strong>示例 2：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入：numbers = [2,3,4], target = 6</span><br><span class=\"line\">输出：[1,3]</span><br></pre></td></tr></table></figure>\n\n<p><strong>示例 3：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入：numbers = [-1,0], target = -1</span><br><span class=\"line\">输出：[1,2]</span><br></pre></td></tr></table></figure>\n\n<p><strong>提示：</strong></p>\n<ul>\n<li><code>2 &lt;= numbers.length &lt;= 3 * 104</code></li>\n<li><code>-1000 &lt;= numbers[i] &lt;= 1000</code></li>\n<li><code>numbers</code> 按 <strong>递增顺序</strong> 排列</li>\n<li><code>-1000 &lt;= target &lt;= 1000</code></li>\n<li>仅存在一个有效答案</li>\n</ul>\n<p><strong>解析：</strong></p>\n<p>来源链接：<a href=\"https://leetcode-cn.com/problems/two-sum-ii-input-array-is-sorted/solution/liang-shu-zhi-he-ii-shu-ru-you-xu-shu-zu-by-leet-2/\">两数之和 II - 输入有序数组 - 两数之和 II - 输入有序数组 - 力扣（LeetCode） (leetcode-cn.com)</a></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span>[] twoSum(<span class=\"keyword\">int</span>[] numbers, <span class=\"keyword\">int</span> target) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(numbers == <span class=\"keyword\">null</span>) <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> i  = <span class=\"number\">0</span>, j = numbers.length-<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(i&lt;j)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> sum = numbers[i] + numbers[j];</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(sum == target)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[]&#123;i+<span class=\"number\">1</span>,j+<span class=\"number\">1</span>&#125;;</span><br><span class=\"line\">            &#125; </span><br><span class=\"line\">              </span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(sum &gt; target)&#123;</span><br><span class=\"line\">                j--;</span><br><span class=\"line\">            &#125; </span><br><span class=\"line\">            <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                i++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"633-平方数之和\"><a href=\"#633-平方数之和\" class=\"headerlink\" title=\"633. 平方数之和\"></a><a href=\"https://leetcode-cn.com/problems/sum-of-square-numbers/\">633. 平方数之和</a></h4><p>难度:中等</p>\n<p>给定一个非负整数 <code>c</code> ，你要判断是否存在两个整数 <code>a</code> 和 <code>b</code>，使得 <code>a2 + b2 = c</code> 。</p>\n<p><strong>示例 1：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入：c = 5</span><br><span class=\"line\">输出：true</span><br><span class=\"line\">解释：1 * 1 + 2 * 2 = 5</span><br></pre></td></tr></table></figure>\n\n<p><strong>示例 2：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入：c = 3</span><br><span class=\"line\">输出：false</span><br></pre></td></tr></table></figure>\n\n<p><strong>示例 3：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入：c = 4</span><br><span class=\"line\">输出：true</span><br></pre></td></tr></table></figure>\n\n<p><strong>示例 4：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入：c = 2</span><br><span class=\"line\">输出：true</span><br></pre></td></tr></table></figure>\n\n<p><strong>示例 5：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入：c = 1</span><br><span class=\"line\">输出：true</span><br></pre></td></tr></table></figure>\n\n<p><strong>提示：</strong></p>\n<ul>\n<li><code>0 &lt;= c &lt;= 231 - 1</code></li>\n</ul>\n<p><strong>解析：</strong></p>\n<p>来源链接：<a href=\"https://leetcode-cn.com/problems/sum-of-square-numbers/solution/shuang-zhi-zhen-de-ben-zhi-er-wei-ju-zhe-ebn3/\">为什么双指针不会错过正确答案？双指针的本质。 - 平方数之和 - 力扣（LeetCode） (leetcode-cn.com)</a></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">judgeSquareSum</span><span class=\"params\">(<span class=\"keyword\">int</span> c)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> i  = <span class=\"number\">0</span>, j = (<span class=\"keyword\">int</span>)Math.sqrt(c);<span class=\"comment\">//从double转为int 需要强转</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(i &lt;= j)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> sum  = i * i + j * j;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(sum == c)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(sum &gt; c)&#123;</span><br><span class=\"line\">                j--;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                i++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">             </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"345-反转字符串中的元音字母\"><a href=\"#345-反转字符串中的元音字母\" class=\"headerlink\" title=\"345. 反转字符串中的元音字母\"></a><a href=\"https://leetcode-cn.com/problems/reverse-vowels-of-a-string/\">345. 反转字符串中的元音字母</a></h4><p>难度:简单</p>\n<p>编写一个函数，以字符串作为输入，反转该字符串中的元音字母。</p>\n<p><strong>示例 1：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入：&quot;hello&quot;</span><br><span class=\"line\">输出：&quot;holle&quot;</span><br></pre></td></tr></table></figure>\n\n<p><strong>示例 2：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入：&quot;leetcode&quot;</span><br><span class=\"line\">输出：&quot;leotcede&quot;</span><br></pre></td></tr></table></figure>\n\n<p><strong>提示：</strong></p>\n<ul>\n<li>元音字母不包含字母 “y” 。</li>\n</ul>\n<p><strong>解析;</strong></p>\n<p><a href=\"https://camo.githubusercontent.com/17ebd4ccaad189dd486211b3e18e20287541acf35cb203dd510aef61bfcdc301/68747470733a2f2f63732d6e6f7465732d313235363130393739362e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f61376362383432332d383935642d343937352d386566382d3636326130303239633737322e706e67\"><img src=\"https://camo.githubusercontent.com/17ebd4ccaad189dd486211b3e18e20287541acf35cb203dd510aef61bfcdc301/68747470733a2f2f63732d6e6f7465732d313235363130393739362e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f61376362383432332d383935642d343937352d386566382d3636326130303239633737322e706e67\" alt=\"img\"></a></p>\n<p>使用双指针，一个指针从头向尾遍历，一个指针从尾到头遍历，当两个指针都遍历到元音字符时，交换这两个元音字符。</p>\n<p>为了快速判断一个字符是不是元音字符，我们将全部元音字符添加到集合 HashSet 中，从而以 O(1) 的时间复杂度进行该操作。</p>\n<ul>\n<li>时间复杂度为 O(N)：只需要遍历所有元素一次</li>\n<li>空间复杂度 O(1)：只需要使用两个额外变量</li>\n</ul>\n<p><a href=\"https://camo.githubusercontent.com/8bed07b0617ab2350feddf81b28b3a3c3e6a6d69adcbbde555576514a3ac50c6/68747470733a2f2f63732d6e6f7465732d313235363130393739362e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f65663235666637632d306636332d343230642d386233302d6561666265656133356431312e676966\"><img src=\"https://camo.githubusercontent.com/8bed07b0617ab2350feddf81b28b3a3c3e6a6d69adcbbde555576514a3ac50c6/68747470733a2f2f63732d6e6f7465732d313235363130393739362e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f65663235666637632d306636332d343230642d386233302d6561666265656133356431312e676966\" alt=\"img\"></a></p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\"> Arrays.asList()该方法是将数组转化成List集合的方法。</span><br><span class=\"line\"></span><br><span class=\"line\"> List<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">String</span>&gt;</span></span> list = Arrays.asList(&quot;a&quot;,&quot;b&quot;,&quot;c&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">注意：</span><br><span class=\"line\"></span><br><span class=\"line\">（1）该方法适用于对象型数据的数组（String、Integer...）</span><br><span class=\"line\"></span><br><span class=\"line\">（2）该方法不建议使用于基本数据类型的数组（byte,short,int,long,float,double,boolean）</span><br><span class=\"line\"></span><br><span class=\"line\">（3）该方法将数组与List列表链接起来：当更新其一个时，另一个自动更新</span><br><span class=\"line\"></span><br><span class=\"line\">（4）不支持add()、remove()、clear()等方法</span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> HashSet&lt;Character&gt; vowels = <span class=\"keyword\">new</span> HashSet&lt;&gt;( <span class=\"comment\">//这里HashSet也可以换成List</span></span><br><span class=\"line\">        Arrays.asList(<span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;e&#x27;</span>, <span class=\"string\">&#x27;i&#x27;</span>, <span class=\"string\">&#x27;o&#x27;</span>, <span class=\"string\">&#x27;u&#x27;</span>, <span class=\"string\">&#x27;A&#x27;</span>, <span class=\"string\">&#x27;E&#x27;</span>, <span class=\"string\">&#x27;I&#x27;</span>, <span class=\"string\">&#x27;O&#x27;</span>, <span class=\"string\">&#x27;U&#x27;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">reverseVowels</span><span class=\"params\">(String s)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (s == <span class=\"keyword\">null</span>) <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>, j = s.length() - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">char</span>[] result = <span class=\"keyword\">new</span> <span class=\"keyword\">char</span>[s.length()];</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (i &lt;= j) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">char</span> ci = s.charAt(i);</span><br><span class=\"line\">        <span class=\"keyword\">char</span> cj = s.charAt(j);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!vowels.contains(ci)) &#123;</span><br><span class=\"line\">            result[i++] = ci;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!vowels.contains(cj)) &#123;</span><br><span class=\"line\">            result[j--] = cj;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            result[i++] = cj;</span><br><span class=\"line\">            result[j--] = ci;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> String(result);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"680-验证回文字符串-Ⅱ\"><a href=\"#680-验证回文字符串-Ⅱ\" class=\"headerlink\" title=\"680. 验证回文字符串 Ⅱ\"></a><a href=\"https://leetcode-cn.com/problems/valid-palindrome-ii/\">680. 验证回文字符串 Ⅱ</a></h4><p>难度:简单</p>\n<p>给定一个非空字符串 <code>s</code>，<strong>最多</strong>删除一个字符。判断是否能成为回文字符串。</p>\n<p><strong>示例 1:</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入: s = &quot;aba&quot;</span><br><span class=\"line\">输出: true</span><br></pre></td></tr></table></figure>\n\n<p><strong>示例 2:</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入: s = &quot;abca&quot;</span><br><span class=\"line\">输出: true</span><br><span class=\"line\">解释: 你可以删除c字符。</span><br></pre></td></tr></table></figure>\n\n<p><strong>示例 3:</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入: s = &quot;abc&quot;</span><br><span class=\"line\">输出: false</span><br></pre></td></tr></table></figure>\n\n<p><strong>提示:</strong></p>\n<ul>\n<li><code>1 &lt;= s.length &lt;= 105</code></li>\n<li><code>s</code> 由小写英文字母组成</li>\n</ul>\n<p><strong>解析</strong>：</p>\n<p>来源链接：<a href=\"https://leetcode-cn.com/problems/valid-palindrome-ii/solution/yan-zheng-hui-wen-zi-fu-chuan-ii-by-leetcode-solut/\">验证回文字符串 Ⅱ - 验证回文字符串 Ⅱ - 力扣（LeetCode） (leetcode-cn.com)</a></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">validPalindrome</span><span class=\"params\">(String s)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i =<span class=\"number\">0</span> ,j = s.length()-<span class=\"number\">1</span>;i&lt;j;i++,j--)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(s.charAt(i) != s.charAt(j))&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> isPalindrome(s,i+<span class=\"number\">1</span>,j) || isPalindrome(s,i,j-<span class=\"number\">1</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isPalindrome</span><span class=\"params\">(String s , <span class=\"keyword\">int</span> i ,<span class=\"keyword\">int</span> j)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(i&lt;j)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(s.charAt(i++) != s.charAt(j--))&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            &#125; </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"88-合并两个有序数组\"><a href=\"#88-合并两个有序数组\" class=\"headerlink\" title=\"88. 合并两个有序数组\"></a><a href=\"https://leetcode-cn.com/problems/merge-sorted-array/\">88. 合并两个有序数组</a></h4><p>难度:简单</p>\n<p>给你两个有序整数数组 <code>nums1</code> 和 <code>nums2</code>，请你将 <code>nums2</code> 合并到 <code>nums1</code> 中<em>，</em>使 <code>nums1</code> 成为一个有序数组。</p>\n<p>初始化 <code>nums1</code> 和 <code>nums2</code> 的元素数量分别为 <code>m</code> 和 <code>n</code> 。你可以假设 <code>nums1</code> 的空间大小等于 <code>m + n</code>，这样它就有足够的空间保存来自 <code>nums2</code> 的元素。</p>\n<p><strong>示例 1：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入：nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3</span><br><span class=\"line\">输出：[1,2,2,3,5,6]</span><br></pre></td></tr></table></figure>\n\n<p><strong>示例 2：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入：nums1 = [1], m = 1, nums2 = [], n = 0</span><br><span class=\"line\">输出：[1]</span><br></pre></td></tr></table></figure>\n\n<p><strong>提示：</strong></p>\n<ul>\n<li><code>nums1.length == m + n</code></li>\n<li><code>nums2.length == n</code></li>\n<li><code>0 &lt;= m, n &lt;= 200</code></li>\n<li><code>1 &lt;= m + n &lt;= 200</code></li>\n<li><code>-109 &lt;= nums1[i], nums2[i] &lt;= 109</code></li>\n</ul>\n<p><strong>解析：</strong></p>\n<p>来源链接：<a href=\"https://leetcode-cn.com/problems/merge-sorted-array/solution/hua-jie-suan-fa-88-he-bing-liang-ge-you-xu-shu-zu-/\">画解算法：88. 合并两个有序数组 - 合并两个有序数组 - 力扣（LeetCode） (leetcode-cn.com)</a></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">merge</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums1, <span class=\"keyword\">int</span> m, <span class=\"keyword\">int</span>[] nums2, <span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> index1 = m-<span class=\"number\">1</span>,index2 = n -<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> mergeIndex = m+n-<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(index2 &gt;= <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(index1 &lt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                nums1[mergeIndex--] = nums2[index2--];</span><br><span class=\"line\">            <span class=\"comment\">//以下index2&lt;0 这个判断可写可不写    </span></span><br><span class=\"line\">            <span class=\"comment\">//&#125;else if(index2 &lt; 0)&#123;</span></span><br><span class=\"line\">                <span class=\"comment\">// nums1[mergeIndex--] = nums1[index1--];    </span></span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(nums1[index1] &gt; nums2[index2])&#123;</span><br><span class=\"line\">                nums1[mergeIndex--] = nums1[index1--];</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                nums1[mergeIndex--] = nums2[index2--];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"141-环形链表\"><a href=\"#141-环形链表\" class=\"headerlink\" title=\"141. 环形链表\"></a><a href=\"https://leetcode-cn.com/problems/linked-list-cycle/\">141. 环形链表</a></h4><p>难度:简单</p>\n<p>给定一个链表，判断链表中是否有环。</p>\n<p>如果链表中有某个节点，可以通过连续跟踪 <code>next</code> 指针再次到达，则链表中存在环。 为了表示给定链表中的环，我们使用整数 <code>pos</code> 来表示链表尾连接到链表中的位置（索引从 0 开始）。 如果 <code>pos</code> 是 <code>-1</code>，则在该链表中没有环。<strong>注意：<code>pos</code> 不作为参数进行传递</strong>，仅仅是为了标识链表的实际情况。</p>\n<p>如果链表中存在环，则返回 <code>true</code> 。 否则，返回 <code>false</code> 。</p>\n<p><strong>进阶：</strong></p>\n<p>你能用 *O(1)*（即，常量）内存解决此问题吗？</p>\n<p><strong>示例 1：</strong></p>\n<p><img src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/07/circularlinkedlist.png\" alt=\"img\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入：head = [3,2,0,-4], pos = 1</span><br><span class=\"line\">输出：true</span><br><span class=\"line\">解释：链表中有一个环，其尾部连接到第二个节点。</span><br></pre></td></tr></table></figure>\n\n<p><strong>示例 2：</strong></p>\n<p><img src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/07/circularlinkedlist_test2.png\" alt=\"img\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入：head = [1,2], pos = 0</span><br><span class=\"line\">输出：true</span><br><span class=\"line\">解释：链表中有一个环，其尾部连接到第一个节点。</span><br></pre></td></tr></table></figure>\n\n<p><strong>示例 3：</strong></p>\n<p><img src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/07/circularlinkedlist_test3.png\" alt=\"img\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入：head = [1], pos = -1</span><br><span class=\"line\">输出：false</span><br><span class=\"line\">解释：链表中没有环。</span><br></pre></td></tr></table></figure>\n\n<p><strong>提示：</strong></p>\n<ul>\n<li>链表中节点的数目范围是 <code>[0, 104]</code></li>\n<li><code>-105 &lt;= Node.val &lt;= 105</code></li>\n<li><code>pos</code> 为 <code>-1</code> 或者链表中的一个 <strong>有效索引</strong> 。</li>\n</ul>\n<p><strong>解析：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for singly-linked list.</span></span><br><span class=\"line\"><span class=\"comment\"> * class ListNode &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     int val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     ListNode next;</span></span><br><span class=\"line\"><span class=\"comment\"> *     ListNode(int x) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *         val = x;</span></span><br><span class=\"line\"><span class=\"comment\"> *         next = null;</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">hasCycle</span><span class=\"params\">(ListNode head)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(head == <span class=\"keyword\">null</span>) <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        ListNode slow = head,fast = head;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>( fast != <span class=\"keyword\">null</span> &amp;&amp; fast.next!= <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            </span><br><span class=\"line\">            fast = fast.next.next;</span><br><span class=\"line\">            slow = slow.next;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(slow == fast) <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>; <span class=\"comment\">// 先移动再判断，避免两个都在head还没移动的情况</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>解题思路</strong></p>\n<p>此题可以定义一个fast和slow两个引用，先开始让他们都指向头节点。然后让fast一次性走2步，slow一次性走一步，如果他们可以相遇，则证明链表有环。不让fast一次性走更多步的原因是，虽然可能相遇更快点，但也有可能相遇更慢，或者永远也相遇不了，这样的话不太稳定。因此我们选择让fast这个快引用一次走2步！</p>\n<p><strong>代码</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * Definition for singly-linked list.</span><br><span class=\"line\"> * class ListNode &#123;</span><br><span class=\"line\"> *     int val;</span><br><span class=\"line\"> *     ListNode next;</span><br><span class=\"line\"> *     ListNode(int x) &#123;</span><br><span class=\"line\"> *         val = x;</span><br><span class=\"line\"> *         next = null;</span><br><span class=\"line\"> *     &#125;</span><br><span class=\"line\"> * &#125;</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class Solution &#123;</span><br><span class=\"line\">    public boolean hasCycle(ListNode head) &#123;</span><br><span class=\"line\">        ListNode fast=head;</span><br><span class=\"line\">        ListNode slow=head;//定义快慢引用</span><br><span class=\"line\">        while(fast!=null&amp;&amp;fast.next!=null)&#123;</span><br><span class=\"line\">            //fast!=null要写在前面，这样由于短路与的特性，当前面为真时后面的条件就不执行了，就不会空指针异常了</span><br><span class=\"line\">            fast=fast.next.next;</span><br><span class=\"line\">            slow=slow.next;</span><br><span class=\"line\">            if(fast==slow)&#123;</span><br><span class=\"line\">                return true;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return false;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"524-通过删除字母匹配到字典里最长单词\"><a href=\"#524-通过删除字母匹配到字典里最长单词\" class=\"headerlink\" title=\"524. 通过删除字母匹配到字典里最长单词\"></a><a href=\"https://leetcode-cn.com/problems/longest-word-in-dictionary-through-deleting/\">524. 通过删除字母匹配到字典里最长单词</a></h4><p>难度：中等</p>\n<p>给你一个字符串 <code>s</code> 和一个字符串数组 <code>dictionary</code> 作为字典，找出并返回字典中最长的字符串，该字符串可以通过删除 <code>s</code> 中的某些字符得到。</p>\n<p>如果答案不止一个，返回长度最长且字典序最小的字符串。如果答案不存在，则返回空字符串。</p>\n<p><strong>示例 1：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入：s = &quot;abpcplea&quot;, dictionary = [&quot;ale&quot;,&quot;apple&quot;,&quot;monkey&quot;,&quot;plea&quot;]</span><br><span class=\"line\">输出：&quot;apple&quot;</span><br></pre></td></tr></table></figure>\n\n<p><strong>示例 2：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入：s = &quot;abpcplea&quot;, dictionary = [&quot;a&quot;,&quot;b&quot;,&quot;c&quot;]</span><br><span class=\"line\">输出：&quot;a&quot;</span><br></pre></td></tr></table></figure>\n\n<p><strong>提示：</strong></p>\n<ul>\n<li><code>1 &lt;= s.length &lt;= 1000</code></li>\n<li><code>1 &lt;= dictionary.length &lt;= 1000</code></li>\n<li><code>1 &lt;= dictionary[i].length &lt;= 1000</code></li>\n<li><code>s</code> 和 <code>dictionary[i]</code> 仅由小写英文字母组成</li>\n</ul>\n<p><strong>解析：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">findLongestWord</span><span class=\"params\">(String s, List&lt;String&gt; dictionary)</span> </span>&#123;</span><br><span class=\"line\">        String longestWord = <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(String target : dictionary)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> l1 = longestWord.length(),l2 = target.length();</span><br><span class=\"line\">            <span class=\"comment\">//   java中的compareto方法，返回参与比较的前后两个字符串的asc码的差值</span></span><br><span class=\"line\">            <span class=\"comment\">/// 获取长度最长且字典顺序最小的字符串</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(l1 &gt; l2 || (l1==l2) &amp;&amp; longestWord.compareTo(target) &lt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(isSubstr(s,target))&#123;</span><br><span class=\"line\">                longestWord = target;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> longestWord;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"comment\">// 判断 target 是否为 s 的子序列</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isSubstr</span><span class=\"params\">(String s,String target)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>, j = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(i&lt;s.length() &amp;&amp; j &lt; target.length())&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(s.charAt(i) == target.charAt(j))&#123;</span><br><span class=\"line\">                j++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            i++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> j == target.length();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n","categories":["leetcode","算法"],"tags":["算法"]}]